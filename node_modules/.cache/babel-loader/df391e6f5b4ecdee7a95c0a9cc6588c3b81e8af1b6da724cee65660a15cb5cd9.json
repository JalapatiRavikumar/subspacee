{"ast":null,"code":"// --- MOCKED NHOST AUTHENTICATION ---\n// This object simulates the Nhost auth client.\nexport const mockNhost = {\n  auth: {\n    // In a real app, this would make a network request.\n    signUp: async ({\n      email,\n      password\n    }) => {\n      if (!email || !password) {\n        return {\n          user: null,\n          error: {\n            message: 'Email and password are required.'\n          }\n        };\n      }\n      const newUser = {\n        id: `user_${Date.now()}`,\n        email,\n        role: 'user'\n      };\n      localStorage.setItem('mock_user', JSON.stringify(newUser));\n      localStorage.setItem('mock_jwt', `mock_jwt_for_${newUser.id}`);\n      return {\n        user: newUser,\n        session: {\n          accessToken: `mock_jwt_for_${newUser.id}`\n        },\n        error: null\n      };\n    },\n    signIn: async ({\n      email\n    }) => {\n      // Simplified sign-in for this mock\n      const existingUser = {\n        id: `user_12345`,\n        email,\n        role: 'user'\n      };\n      localStorage.setItem('mock_user', JSON.stringify(existingUser));\n      localStorage.setItem('mock_jwt', `mock_jwt_for_${existingUser.id}`);\n      return {\n        user: existingUser,\n        session: {\n          accessToken: `mock_jwt_for_${existingUser.id}`\n        },\n        error: null\n      };\n    },\n    // In a real app, this clears the session.\n    signOut: async () => {\n      localStorage.removeItem('mock_user');\n      localStorage.removeItem('mock_jwt');\n      return {\n        error: null\n      };\n    },\n    // This function simulates checking the auth state on app load.\n    onAuthStateChanged: callback => {\n      const user = JSON.parse(localStorage.getItem('mock_user'));\n      const token = localStorage.getItem('mock_jwt');\n      if (user && token) {\n        callback(true, {\n          accessToken: token\n        });\n      } else {\n        callback(false, null);\n      }\n      // This is a dummy unsubscribe function.\n      return {\n        unsubscribe: () => {}\n      };\n    },\n    getUser: () => {\n      return JSON.parse(localStorage.getItem('mock_user'));\n    }\n  }\n};\n\n// --- MOCKED HASURA/GRAPHQL CLIENT & DATABASE ---\n// This class simulates a GraphQL client and a local database.\n// In a real app, you would use a library like Apollo Client.\nexport class MockGraphQLClient {\n  constructor() {\n    var _mockNhost$auth$getUs;\n    this.db = {\n      chats: JSON.parse(localStorage.getItem('mock_db_chats')) || [],\n      messages: JSON.parse(localStorage.getItem('mock_db_messages')) || []\n    };\n    this.subscriptions = {};\n    this.userId = (_mockNhost$auth$getUs = mockNhost.auth.getUser()) === null || _mockNhost$auth$getUs === void 0 ? void 0 : _mockNhost$auth$getUs.id;\n  }\n\n  // Helper to persist data to localStorage\n  _persist() {\n    localStorage.setItem('mock_db_chats', JSON.stringify(this.db.chats));\n    localStorage.setItem('mock_db_messages', JSON.stringify(this.db.messages));\n  }\n\n  // Simulates running a GraphQL query\n  query(query, variables) {\n    return new Promise(resolve => {\n      // GET_CHATS_QUERY\n      if (query.includes('getChats')) {\n        const userChats = this.db.chats.filter(c => c.user_id === this.userId);\n        resolve({\n          data: {\n            chats: userChats\n          }\n        });\n      }\n      // GET_MESSAGES_QUERY\n      if (query.includes('getMessages')) {\n        const chatMessages = this.db.messages.filter(m => m.chat_id === variables.chat_id);\n        resolve({\n          data: {\n            messages: chatMessages\n          }\n        });\n      }\n    });\n  }\n\n  // Simulates running a GraphQL mutation\n  mutation(mutation, variables) {\n    return new Promise(resolve => {\n      // CREATE_CHAT_MUTATION\n      if (mutation.includes('createChat')) {\n        const newChat = {\n          id: `chat_${Date.now()}`,\n          user_id: this.userId,\n          title: 'New Conversation',\n          created_at: new Date().toISOString()\n        };\n        this.db.chats.unshift(newChat);\n        this._persist();\n        resolve({\n          data: {\n            insert_chats_one: newChat\n          }\n        });\n      }\n      // SEND_MESSAGE_MUTATION\n      if (mutation.includes('sendMessage')) {\n        const userMessage = {\n          id: `msg_${Date.now()}`,\n          chat_id: variables.chat_id,\n          content: variables.content,\n          role: 'user',\n          created_at: new Date().toISOString()\n        };\n        this.db.messages.push(userMessage);\n        this._persist();\n\n        // This is the crucial part that simulates the Hasura Action.\n        this._triggerBotResponseAction(variables.chat_id, variables.content);\n        resolve({\n          data: {\n            insert_messages_one: userMessage\n          }\n        });\n      }\n    });\n  }\n\n  // Simulates a GraphQL subscription\n  subscribe(query, variables, callback) {\n    const key = `${variables.chat_id}`;\n    this.subscriptions[key] = callback;\n\n    // Immediately send the current data\n    const chatMessages = this.db.messages.filter(m => m.chat_id === variables.chat_id);\n    callback({\n      data: {\n        messages: chatMessages\n      }\n    });\n\n    // Return an unsubscribe function\n    return {\n      unsubscribe: () => {\n        delete this.subscriptions[key];\n      }\n    };\n  }\n\n  // Helper to notify subscribers of new data\n  _notify(chat_id) {\n    if (this.subscriptions[chat_id]) {\n      const chatMessages = this.db.messages.filter(m => m.chat_id === variables.chat_id);\n      this.subscriptions[chat_id]({\n        data: {\n          messages: chatMessages\n        }\n      });\n    }\n  }\n\n  // --- SIMULATED HASURA ACTION -> N8N -> GEMINI API ---\n  async _triggerBotResponseAction(chat_id, prompt) {\n    // 1. Hasura Action is triggered by the `sendMessage` mutation.\n    // 2. Action calls n8n webhook, passing { chat_id, prompt, user_id }.\n    // 3. n8n workflow validates user owns the chat_id (we assume this passes).\n    // 4. n8n calls the external API (Gemini).\n    console.log(\"ðŸ¤– Action Triggered: Getting bot response for prompt:\", prompt);\n\n    // Simulate network delay for the bot's response\n    await new Promise(res => setTimeout(res, 1500));\n    try {\n      const botContent = await this.getGeminiResponse(prompt);\n\n      // 5. n8n saves the response back to the DB via a GraphQL mutation.\n      const botMessage = {\n        id: `msg_${Date.now()}`,\n        chat_id: chat_id,\n        content: botContent,\n        role: 'assistant',\n        created_at: new Date().toISOString()\n      };\n      this.db.messages.push(botMessage);\n      this._persist();\n\n      // 6. The subscription on the frontend receives the new message.\n      this._notify(chat_id);\n      console.log(\"âœ… Bot response saved and notification sent.\");\n    } catch (error) {\n      console.error(\"Error getting bot response:\", error);\n      const errorMessage = {\n        id: `msg_${Date.now()}`,\n        chat_id: chat_id,\n        content: \"Sorry, I encountered an error. Please try again.\",\n        role: 'assistant',\n        created_at: new Date().toISOString()\n      };\n      this.db.messages.push(errorMessage);\n      this._persist();\n      this._notify(chat_id);\n    }\n  }\n\n  // --- REAL GEMINI API CALL ---\n  // This function makes a real network request to the Gemini API.\n  async getGeminiResponse(prompt) {\n    // IMPORTANT: The user provided this API key.\n    const apiKey = \"AIzaSyD2VxZcYMBXLdHW_EF7dbW7L9WUqf-J89Y\";\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\n    const payload = {\n      contents: [{\n        role: \"user\",\n        parts: [{\n          text: prompt\n        }]\n      }]\n    };\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    if (!response.ok) {\n      const errorBody = await response.text();\n      throw new Error(`API request failed with status ${response.status}: ${errorBody}`);\n    }\n    const result = await response.json();\n    if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {\n      return result.candidates[0].content.parts[0].text;\n    } else {\n      console.error(\"Unexpected API response structure:\", result);\n      throw new Error(\"Could not extract text from Gemini API response.\");\n    }\n  }\n}","map":{"version":3,"names":["mockNhost","auth","signUp","email","password","user","error","message","newUser","id","Date","now","role","localStorage","setItem","JSON","stringify","session","accessToken","signIn","existingUser","signOut","removeItem","onAuthStateChanged","callback","parse","getItem","token","unsubscribe","getUser","MockGraphQLClient","constructor","_mockNhost$auth$getUs","db","chats","messages","subscriptions","userId","_persist","query","variables","Promise","resolve","includes","userChats","filter","c","user_id","data","chatMessages","m","chat_id","mutation","newChat","title","created_at","toISOString","unshift","insert_chats_one","userMessage","content","push","_triggerBotResponseAction","insert_messages_one","subscribe","key","_notify","prompt","console","log","res","setTimeout","botContent","getGeminiResponse","botMessage","errorMessage","apiKey","apiUrl","payload","contents","parts","text","response","fetch","method","headers","body","ok","errorBody","Error","status","result","json","candidates","length"],"sources":["C:/Users/rravi/Downloads/abcd/src/graphql.js"],"sourcesContent":["// --- MOCKED NHOST AUTHENTICATION ---\r\n// This object simulates the Nhost auth client.\r\nexport const mockNhost = {\r\n  auth: {\r\n    // In a real app, this would make a network request.\r\n    signUp: async ({ email, password }) => {\r\n      if (!email || !password) {\r\n        return { user: null, error: { message: 'Email and password are required.' } };\r\n      }\r\n      const newUser = { id: `user_${Date.now()}`, email, role: 'user' };\r\n      localStorage.setItem('mock_user', JSON.stringify(newUser));\r\n      localStorage.setItem('mock_jwt', `mock_jwt_for_${newUser.id}`);\r\n      return { user: newUser, session: { accessToken: `mock_jwt_for_${newUser.id}` }, error: null };\r\n    },\r\n    signIn: async ({ email }) => {\r\n        // Simplified sign-in for this mock\r\n        const existingUser = { id: `user_12345`, email, role: 'user' };\r\n        localStorage.setItem('mock_user', JSON.stringify(existingUser));\r\n        localStorage.setItem('mock_jwt', `mock_jwt_for_${existingUser.id}`);\r\n        return { user: existingUser, session: { accessToken: `mock_jwt_for_${existingUser.id}` }, error: null };\r\n    },\r\n    // In a real app, this clears the session.\r\n    signOut: async () => {\r\n      localStorage.removeItem('mock_user');\r\n      localStorage.removeItem('mock_jwt');\r\n      return { error: null };\r\n    },\r\n    // This function simulates checking the auth state on app load.\r\n    onAuthStateChanged: (callback) => {\r\n      const user = JSON.parse(localStorage.getItem('mock_user'));\r\n      const token = localStorage.getItem('mock_jwt');\r\n      if (user && token) {\r\n        callback(true, { accessToken: token });\r\n      } else {\r\n        callback(false, null);\r\n      }\r\n      // This is a dummy unsubscribe function.\r\n      return { unsubscribe: () => {} };\r\n    },\r\n    getUser: () => {\r\n        return JSON.parse(localStorage.getItem('mock_user'));\r\n    }\r\n  },\r\n};\r\n\r\n\r\n// --- MOCKED HASURA/GRAPHQL CLIENT & DATABASE ---\r\n// This class simulates a GraphQL client and a local database.\r\n// In a real app, you would use a library like Apollo Client.\r\nexport class MockGraphQLClient {\r\n  constructor() {\r\n    this.db = {\r\n      chats: JSON.parse(localStorage.getItem('mock_db_chats')) || [],\r\n      messages: JSON.parse(localStorage.getItem('mock_db_messages')) || [],\r\n    };\r\n    this.subscriptions = {};\r\n    this.userId = mockNhost.auth.getUser()?.id;\r\n  }\r\n\r\n  // Helper to persist data to localStorage\r\n  _persist() {\r\n    localStorage.setItem('mock_db_chats', JSON.stringify(this.db.chats));\r\n    localStorage.setItem('mock_db_messages', JSON.stringify(this.db.messages));\r\n  }\r\n\r\n  // Simulates running a GraphQL query\r\n  query(query, variables) {\r\n    return new Promise((resolve) => {\r\n      // GET_CHATS_QUERY\r\n      if (query.includes('getChats')) {\r\n        const userChats = this.db.chats.filter(c => c.user_id === this.userId);\r\n        resolve({ data: { chats: userChats } });\r\n      }\r\n      // GET_MESSAGES_QUERY\r\n      if (query.includes('getMessages')) {\r\n        const chatMessages = this.db.messages.filter(m => m.chat_id === variables.chat_id);\r\n        resolve({ data: { messages: chatMessages } });\r\n      }\r\n    });\r\n  }\r\n\r\n  // Simulates running a GraphQL mutation\r\n  mutation(mutation, variables) {\r\n    return new Promise((resolve) => {\r\n        // CREATE_CHAT_MUTATION\r\n        if (mutation.includes('createChat')) {\r\n            const newChat = {\r\n                id: `chat_${Date.now()}`,\r\n                user_id: this.userId,\r\n                title: 'New Conversation',\r\n                created_at: new Date().toISOString(),\r\n            };\r\n            this.db.chats.unshift(newChat);\r\n            this._persist();\r\n            resolve({ data: { insert_chats_one: newChat } });\r\n        }\r\n        // SEND_MESSAGE_MUTATION\r\n        if (mutation.includes('sendMessage')) {\r\n            const userMessage = {\r\n                id: `msg_${Date.now()}`,\r\n                chat_id: variables.chat_id,\r\n                content: variables.content,\r\n                role: 'user',\r\n                created_at: new Date().toISOString(),\r\n            };\r\n            this.db.messages.push(userMessage);\r\n            this._persist();\r\n            \r\n            // This is the crucial part that simulates the Hasura Action.\r\n            this._triggerBotResponseAction(variables.chat_id, variables.content);\r\n            \r\n            resolve({ data: { insert_messages_one: userMessage } });\r\n        }\r\n    });\r\n  }\r\n  \r\n  // Simulates a GraphQL subscription\r\n  subscribe(query, variables, callback) {\r\n    const key = `${variables.chat_id}`;\r\n    this.subscriptions[key] = callback;\r\n\r\n    // Immediately send the current data\r\n    const chatMessages = this.db.messages.filter(m => m.chat_id === variables.chat_id);\r\n    callback({ data: { messages: chatMessages } });\r\n\r\n    // Return an unsubscribe function\r\n    return {\r\n      unsubscribe: () => {\r\n        delete this.subscriptions[key];\r\n      },\r\n    };\r\n  }\r\n  \r\n  // Helper to notify subscribers of new data\r\n  _notify(chat_id) {\r\n    if (this.subscriptions[chat_id]) {\r\n      const chatMessages = this.db.messages.filter(m => m.chat_id === variables.chat_id);\r\n      this.subscriptions[chat_id]({ data: { messages: chatMessages } });\r\n    }\r\n  }\r\n\r\n  // --- SIMULATED HASURA ACTION -> N8N -> GEMINI API ---\r\n  async _triggerBotResponseAction(chat_id, prompt) {\r\n    // 1. Hasura Action is triggered by the `sendMessage` mutation.\r\n    // 2. Action calls n8n webhook, passing { chat_id, prompt, user_id }.\r\n    // 3. n8n workflow validates user owns the chat_id (we assume this passes).\r\n    // 4. n8n calls the external API (Gemini).\r\n    console.log(\"ðŸ¤– Action Triggered: Getting bot response for prompt:\", prompt);\r\n    \r\n    // Simulate network delay for the bot's response\r\n    await new Promise(res => setTimeout(res, 1500));\r\n\r\n    try {\r\n      const botContent = await this.getGeminiResponse(prompt);\r\n\r\n      // 5. n8n saves the response back to the DB via a GraphQL mutation.\r\n      const botMessage = {\r\n        id: `msg_${Date.now()}`,\r\n        chat_id: chat_id,\r\n        content: botContent,\r\n        role: 'assistant',\r\n        created_at: new Date().toISOString(),\r\n      };\r\n      this.db.messages.push(botMessage);\r\n      this._persist();\r\n\r\n      // 6. The subscription on the frontend receives the new message.\r\n      this._notify(chat_id);\r\n      console.log(\"âœ… Bot response saved and notification sent.\");\r\n\r\n    } catch (error) {\r\n        console.error(\"Error getting bot response:\", error);\r\n        const errorMessage = {\r\n            id: `msg_${Date.now()}`,\r\n            chat_id: chat_id,\r\n            content: \"Sorry, I encountered an error. Please try again.\",\r\n            role: 'assistant',\r\n            created_at: new Date().toISOString(),\r\n        };\r\n        this.db.messages.push(errorMessage);\r\n        this._persist();\r\n        this._notify(chat_id);\r\n    }\r\n  }\r\n\r\n  // --- REAL GEMINI API CALL ---\r\n  // This function makes a real network request to the Gemini API.\r\n  async getGeminiResponse(prompt) {\r\n    // IMPORTANT: The user provided this API key.\r\n    const apiKey = \"AIzaSyD2VxZcYMBXLdHW_EF7dbW7L9WUqf-J89Y\";\r\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\r\n\r\n    const payload = {\r\n      contents: [{\r\n        role: \"user\",\r\n        parts: [{ text: prompt }]\r\n      }]\r\n    };\r\n\r\n    const response = await fetch(apiUrl, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(payload)\r\n    });\r\n\r\n    if (!response.ok) {\r\n        const errorBody = await response.text();\r\n        throw new Error(`API request failed with status ${response.status}: ${errorBody}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n    \r\n    if (result.candidates && result.candidates.length > 0 &&\r\n        result.candidates[0].content && result.candidates[0].content.parts &&\r\n        result.candidates[0].content.parts.length > 0) {\r\n      return result.candidates[0].content.parts[0].text;\r\n    } else {\r\n      console.error(\"Unexpected API response structure:\", result);\r\n      throw new Error(\"Could not extract text from Gemini API response.\");\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}