{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rravi\\\\Downloads\\\\abcd\\\\src\\\\pages\\\\ChatPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { mockNhost } from '../graphql';\nimport { GQL } from '../graphql';\nimport ChatList from '../components/ChatList';\nimport MessageView from '../components/MessageView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatPage({\n  client,\n  onLogout\n}) {\n  _s();\n  const [chats, setChats] = useState([]);\n  const [activeChatId, setActiveChatId] = useState(null);\n  const user = mockNhost.auth.getUser();\n  const fetchChats = useCallback(async () => {\n    const {\n      data\n    } = await client.query(GQL.GET_CHATS_QUERY, {\n      user_id: user.id\n    });\n    if (data && data.chats) {\n      setChats(data.chats);\n      // If there's no active chat, select the first one.\n      if (!activeChatId && data.chats.length > 0) {\n        setActiveChatId(data.chats[0].id);\n      }\n    }\n  }, [client, user.id, activeChatId]);\n  useEffect(() => {\n    fetchChats();\n  }, [fetchChats]);\n  const handleCreateChat = async () => {\n    const {\n      data\n    } = await client.mutation(GQL.CREATE_CHAT_MUTATION, {\n      user_id: user.id\n    });\n    if (data && data.insert_chats_one) {\n      const newChat = data.insert_chats_one;\n      // Prepend the new chat and make it active\n      setChats(prev => [newChat, ...prev]);\n      setActiveChatId(newChat.id);\n    }\n  };\n  return (\n    /*#__PURE__*/\n    // High-contrast base text color\n    _jsxDEV(\"div\", {\n      className: \"h-screen w-screen flex font-sans text-black dark:text-white\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full md:w-1/3 lg:w-1/4 xl:w-1/5 h-full\",\n        children: /*#__PURE__*/_jsxDEV(ChatList, {\n          chats: chats,\n          onSelectChat: setActiveChatId,\n          onCreateChat: handleCreateChat,\n          activeChatId: activeChatId,\n          onLogout: onLogout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hidden md:flex flex-col flex-grow h-full\",\n        children: /*#__PURE__*/_jsxDEV(MessageView, {\n          chatId: activeChatId,\n          client: client\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(ChatPage, \"z3oJ9rx3kGpD1jZDZcryAKcAezc=\");\n_c = ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","mockNhost","GQL","ChatList","MessageView","jsxDEV","_jsxDEV","ChatPage","client","onLogout","_s","chats","setChats","activeChatId","setActiveChatId","user","auth","getUser","fetchChats","data","query","GET_CHATS_QUERY","user_id","id","length","handleCreateChat","mutation","CREATE_CHAT_MUTATION","insert_chats_one","newChat","prev","className","children","onSelectChat","onCreateChat","fileName","_jsxFileName","lineNumber","columnNumber","chatId","_c","$RefreshReg$"],"sources":["C:/Users/rravi/Downloads/abcd/src/pages/ChatPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { mockNhost } from '../graphql';\r\nimport { GQL } from '../graphql';\r\nimport ChatList from '../components/ChatList';\r\nimport MessageView from '../components/MessageView';\r\n\r\nexport default function ChatPage({ client, onLogout }) {\r\n    const [chats, setChats] = useState([]);\r\n    const [activeChatId, setActiveChatId] = useState(null);\r\n    const user = mockNhost.auth.getUser();\r\n\r\n    const fetchChats = useCallback(async () => {\r\n        const { data } = await client.query(GQL.GET_CHATS_QUERY, { user_id: user.id });\r\n        if (data && data.chats) {\r\n            setChats(data.chats);\r\n            // If there's no active chat, select the first one.\r\n            if (!activeChatId && data.chats.length > 0) {\r\n                setActiveChatId(data.chats[0].id);\r\n            }\r\n        }\r\n    }, [client, user.id, activeChatId]);\r\n\r\n    useEffect(() => {\r\n        fetchChats();\r\n    }, [fetchChats]);\r\n\r\n    const handleCreateChat = async () => {\r\n        const { data } = await client.mutation(GQL.CREATE_CHAT_MUTATION, { user_id: user.id });\r\n        if (data && data.insert_chats_one) {\r\n            const newChat = data.insert_chats_one;\r\n            // Prepend the new chat and make it active\r\n            setChats(prev => [newChat, ...prev]);\r\n            setActiveChatId(newChat.id);\r\n        }\r\n    };\r\n\r\n    return (\r\n        // High-contrast base text color\r\n        <div className=\"h-screen w-screen flex font-sans text-black dark:text-white\">\r\n            <div className=\"w-full md:w-1/3 lg:w-1/4 xl:w-1/5 h-full\">\r\n                <ChatList\r\n                    chats={chats}\r\n                    onSelectChat={setActiveChatId}\r\n                    onCreateChat={handleCreateChat}\r\n                    activeChatId={activeChatId}\r\n                    onLogout={onLogout}\r\n                />\r\n            </div>\r\n            <div className=\"hidden md:flex flex-col flex-grow h-full\">\r\n                <MessageView chatId={activeChatId} client={client} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}